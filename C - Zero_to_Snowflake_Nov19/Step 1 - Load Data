//PREPARE DEMO
//Use role accountadmin;
//drop database SNOWDEMO;

//STEP 1 - DEFINE DBs & ROLES
Use role SECURITYADMIN;

CREATE ROLE "SNOWDEMO_ROLE";  //CREATE CUSTOM ROLE
GRANT ROLE "SNOWDEMO_ROLE" TO USER "ILAN"; //GRANT ROLE TO ADMIN TO BE ABLE TO TEST THE ROLE

//CREATE DATABASES AND SCHEMAS
Use role SNOWDEMO_ROLE; //SWICH EASILY BETWEEN THE NEW ROLE AND THE ACCOUNTADMIN
// *MAKE SURE THE ROLE IS EMPTY - NO DATABASE ON THE LEFT


Use role SYSADMIN;
CREATE or REPLACE WAREHOUSE SNOWDEMO_WH WITH WAREHOUSE_SIZE = 'XSMALL' WAREHOUSE_TYPE = 'STANDARD' AUTO_SUSPEND = 60 AUTO_RESUME = TRUE;

create database SNOWDEMO;

create transient schema "ODS_FULL";
create  schema "ODS";
create transient schema "STG"; //Transient schema
create schema "DWH";

//PERMISSIONS TO DATABASE AND SCHEMAS

Use role SECURITYADMIN;
grant usage on database SNOWDEMO  to role SNOWDEMO_ROLE; //GRANT USAGE TO DB

grant all  on schema SNOWDEMO.ODS_FULL  to role SNOWDEMO_ROLE; //GRANT ALL TO SCHEMA
grant all on all tables in schema SNOWDEMO.ODS_FULL to role SNOWDEMO_ROLE;  //GRANT ALL TO SCHEMA
grant all on future tables in schema SNOWDEMO.ODS_FULL to role SNOWDEMO_ROLE;  //GRANT FUTURE TO SCHEMA

grant all  on schema SNOWDEMO.ODS  to role SNOWDEMO_ROLE; //GRANT ALL TO SCHEMA
grant all on all tables in schema SNOWDEMO.ODS to role SNOWDEMO_ROLE;  //GRANT ALL TO SCHEMA
grant all on future tables in schema SNOWDEMO.ODS to role SNOWDEMO_ROLE;  //GRANT FUTURE TO SCHEMA

grant all  on schema SNOWDEMO.STG  to role SNOWDEMO_ROLE; //GRANT ALL TO SCHEMA
grant all on all tables in schema SNOWDEMO.STG to role SNOWDEMO_ROLE;  //GRANT ALL TO SCHEMA
grant all on future tables in schema SNOWDEMO.STG to role SNOWDEMO_ROLE;  //GRANT FUTURE TO SCHEMA

grant all  on schema SNOWDEMO.DWH  to role SNOWDEMO_ROLE; //GRANT ALL TO SCHEMA
grant all on all tables in schema SNOWDEMO.DWH to role SNOWDEMO_ROLE;  //GRANT ALL TO SCHEMA
grant all on future tables in schema SNOWDEMO.DWH to role SNOWDEMO_ROLE;  //GRANT FUTURE TO SCHEMA

//PERMISSIONS TO WAREHOUSES
grant usage  on warehouse SNOWDEMO_WH to role SNOWDEMO_ROLE; //GRANT USAGE ON WH

Use role SNOWDEMO_ROLE;

//Use role ACCOUNTADMIN;
Use role SYSADMIN;

drop database if exists "SNOWDEMO_DEV";
create database "SNOWDEMO_DEV" clone "SNOWDEMO";

grant all on database SNOWDEMO_DEV  to role SNOWDEMO_ROLE;

Use Database SNOWDEMO;

//Copy
create or replace TABLE ODS.ODS_EVENTS (json_data variant)
COMMENT='Copy can have 1 column'
;

copy into ODS.ODS_EVENTS
from s3://snowflake-visionbi-demo-us/topics
//OUR BUCKET IS PUBLIC
//    credentials = (AWS_KEY_ID='...'
//                   AWS_SECRET_KEY='...' )
FILE_FORMAT = (type=JSON)
ON_ERROR=CONTINUE;


//Use the external \ landing zone
Use Schema ODS_FULL;

//Create stage on S3
create or replace STAGE KAFKA_TOPICS
    url='s3://snowflake-visionbi-demo-us/topics'
    FILE_FORMAT = (type=JSON);

//Select From External
Select $1, current_timestamp() Insert_Time
from @KAFKA_TOPICS/login-events-topic
limit 1000;

Select *
From ODS.ODS_EVENTS;

//Copy from STAGE
create or replace TABLE ODS.ODS_EVENTS (json_data variant, insertion_ts timestamp_LTZ)
COMMENT='Copy can have 1 column'
;
copy into ODS.ODS_EVENTS(JSON_DATA,INSERTION_TS)
From(
Select $1, current_timestamp() Insert_Time
from @KAFKA_TOPICS/login-events-topic
  )
;

Select *
From ODS.ODS_EVENTS;

//Create SNOWPIPE

use role sysadmin;
use database snowdemo;
use schema ODS;
//Create stage on S3
create or replace STAGE KAFKA_TOPICS
    url='s3://snowflake-visionbi-demo-us/topics'
    credentials = (AWS_KEY_ID='...'
               AWS_SECRET_KEY='...')
    FILE_FORMAT = (type=JSON);

create or replace TABLE ODS.ODS_EVENTS_PIPE (json_data variant, insertion_ts timestamp_LTZ)
COMMENT='Copy can have 1 column'
;
create or replace pipe SNOWDEMO.ODS.ODS_EVENTS_PIPE_INGEST auto_ingest=true as
copy into ODS.ODS_EVENTS_PIPE (JSON_DATA,INSERTION_TS)
From(
Select $1, current_timestamp() Insert_Time
from @KAFKA_TOPICS/login-events-topic
  );

show pipes;

Select system$pipe_status('SNOWDEMO.ODS.ODS_EVENTS_PIPE_INGEST');

copy into ODS.ODS_EVENTS_PIPE (JSON_DATA,INSERTION_TS)
From(
Select $1, current_timestamp() Insert_Time
from @KAFKA_TOPICS/login-events-topic
  )
  ;
Select Count(*)
From ODS.ODS_EVENTS_PIPE;

Select *
From SNOWFLAKE.ACCOUNT_USAGE.PIPE_USAGE_HISTORY
;
Select *
From SNOWFLAKE.ACCOUNT_USAGE.PIPES
;


//SHOW S3 BY MINUTES
Select TO_VARCHAR(dateadd(hour, 10, JSON_DATA:ext:timestamp::timestamp ),'yyyy-mm-dd hh:mi'), count(*)
From (
Select $1::VARIANT JSON_DATA
from @KAFKA_TOPICS/login-events-topic
)a
Group by 1
order by 1 desc
limit 100;


//SHOW S3 BY MINUTES
Select TO_VARCHAR(dateadd(hour, 10, JSON_DATA:ext:timestamp::int::timestamp ),'yyyy-mm-dd hh:mi') DATA_TS,
TO_VARCHAR(dateadd(hour, 10, INSERTION_TS ),'yyyy-mm-dd hh:mi') INSERT_TS,
count(*)
From (
Select JSON_DATA,INSERTION_TS
from ODS.ODS_EVENTS_PIPE
)a
Where DATA_TS='2019-11-28 15:11'
Group by 1,2
order by 1 desc
limit 100;




create or replace stream ODS.ODS_EVENTS_STREAM on table ODS.ODS_EVENTS_PIPE;
;

Select *
From  ODS.ODS_EVENTS_STREAM
;

//READ MORE ABOUT STREAMS
//https://docs.snowflake.net/manuals/user-guide/streams.html


